@using GameEngine.Blazor.Helpers
@using System.Text.RegularExpressions
<div id="game">
    <header>
        <div class="title mb-3 mt-3">@GameEngine.Library.Helpers.Constants.GameTitle</div>
        <div class="menu mb-3">
            <button id="help-button" class="btn btn-outline-primary" aria-label="rules" @onclick="OnRulesClick">
                <i class="fad fa-info"></i>
            </button>
            <button id="statistics-button" class="btn btn-outline-primary" aria-label="statistics">
                <i class="fad fa-chart-line"></i>
            </button>
            <button id="settings-button" class="btn btn-outline-primary" aria-label="settings" @onclick="OnSettingsClick">
                <i class="fad fa-cogs"></i>
            </button>
        </div>
    </header>
    @if (GameStateMachine.State is GameState.Rules)
    {
        <RulesDialog OnClose=@OnRulesDialogClose></RulesDialog>
    }
    else if (GameStateMachine.State is GameState.Settings)
    {
        <GameSettingsDialog OnSettingsClosed=@OnGameSettingsDialogClose></GameSettingsDialog>
    }
    else if (GameStateMachine.State is GameState.SourceSelection or GameState.LengthSelection)
    {
        if (GameStateMachine.State is GameState.SourceSelection)
        {
            <h1>Select a Dictionary</h1>
            <DictionarySourceList></DictionarySourceList>
        }
        else if (GameStateMachine.State is GameState.LengthSelection)
        {
            <h1>Select a Word Length</h1>
            <WordLengthList></WordLengthList>
        }
        <div class="row mt-3">
            <div class="col d-flex justify-content-center">
                <button class="btn btn-outline-primary me-1" aria-label="back" @onclick="OnBackClick">
                    <i class="fas fa-step-backward"></i>
                </button>
                <button class="btn btn-outline-primary ms-1" aria-label="next" @onclick="OnNextClick">
                    <i class="fas fa-step-forward"></i>
                </button>
             </div>
        </div>
    }
    else if (GameStateMachine.State is GameState.Playing or GameState.GameOver)
    {
        <div>
            <div id="board-container">
                <GameBoard></GameBoard>
            </div>
            if (GameStateMachine.State is GameState.Playing)
            {
                <GameKeyboard></GameKeyboard>
            }
        </div>
        <div>
            @if (GameStateMachine.Game!.CurrentAttempt >= 1)
            {
                <ul>
                    @foreach (var word in GameStateMachine.Game.LiteralDictionary.FindWords(
                        regex: GameStateMachine.Game.SolvedLettersAsRegex(),
                        wordLength: GameStateMachine.Game.WordLength,
                        maxResults: -1,
                        excludeWords: GameStateMachine.Game.Attempts.Select(selector: attempt => attempt.Word),
                        mustIncludeLetters: GameStateMachine.Game.FoundLetters))
                    {
                        <li>@word</li>
                    }
                </ul>
            }
        </div>
    }
    else
    {
        <h3>Unknown state</h3>
    }
</div>